const fs = require("fs");
const hre = require("hardhat");
const inquirer = require("inquirer");
const { BigNumber } = require("ethers");
const formatContract = (contractName, contractAddress) => `
import ${contractName} from "./hardhat/${contractName}.json";
// To update hardhat contract details run: npm run update-contracts
// To deploy contracts on a local hardhat network and update details run: npm run setup-localhost

export let Lock = {
  addressOrName: "${contractAddress}",
  contractInterface: ${contractName}.abi,
};
`;

function copyFile(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on("error", function (err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on("error", function (err) {
    done(err);
  });
  wr.on("close", function (ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}

const FRONTEND_DIR = "../website/src/contracts";

const main = async () => {
  const contracts = fs.readdirSync("./artifacts/contracts");
  let i = 0;

  for (const contract of contracts) {
    let contractName = contract.slice(0, contract.length - 4);
    let source = `./artifacts/contracts/${contract}/${contractName}.json`;
    let target = `${FRONTEND_DIR}/hardhat/${contractName}.json`;

    fs.readFile(source, (err, data) => {
      if (err) console.log(err);
      else {
        var json = JSON.parse(data);
        //your code using json object
        const abi = JSON.parse(data.toString()).abi;
        const constructor = abi.find((f) => f.type === "constructor");
        let constructorParams = [];
        let questions = constructor.inputs.map((input) => {
          return {
            type: input.type,
            name: input.name,
            message: `Enter ${input.name}:`,
          };
        });

        inquirer
          .prompt(questions)
          .then(async (answers) => {
            let contractFactory = await ethers.getContractFactory(contractName);
            let formatedParams = Object.values(answers).map((value, i) => {
              if (questions[i].type == "uint256") {
                let bigNumberValue = BigNumber.from(value);
                console.log("BigNumber", bigNumberValue);
                return bigNumberValue;
              } else {
                return value;
              }
            });
            let contract = await contractFactory.deploy(...formatedParams);
            console.log("Contract", contract);
          })
          .catch((error) => {
            if (error.isTtyError) {
              // Prompt couldn't be rendered in the current environment
              console.log(error);
            } else {
              console.log(error);
              // Something else went wrong
            }
          });

        console.log(constructor);
      }
    });

    // Copy the contract details generated by hardhat to the frontend/contracts/hardhat folder
    await copyFile(source, target, (e) => {
      i++;
      let messageSuccess =
        "Successfully copied contract " +
        contractName +
        " " +
        i +
        "/" +
        contracts.length;
      let messageError = "Error copying contract" + contractName + e;
      let message = e == undefined ? messageSuccess : messageError;
      console.log(message);
    });

    let Lock = await ethers.getContractFactory("Lock");
  }
};

main().catch(console.error);
